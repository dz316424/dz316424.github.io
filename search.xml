<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tips on developing cross-platform Node.js CLI application</title>
      <link href="/blog/2019/05/14/Tips-on-developing-cross-platform-Node-js-application/"/>
      <url>/blog/2019/05/14/Tips-on-developing-cross-platform-Node-js-application/</url>
      
        <content type="html"><![CDATA[<p>In the past few weeks, I have been working on <a href="https://github.com/koopjs/koop-cli" target="_blank" rel="noopener">Koop CLI</a>, a Node.js CLI application for developers to build <a href="https://koopjs.github.io/" target="_blank" rel="noopener">KoopJS</a> plugins. It has been a big lesson for me about how to create an app that works at different platforms/OSs. Here in this blog post I am going to share some tips.</p><a id="more"></a><h2 id="So-why-do-I-care-about-cross-platform"><a href="#So-why-do-I-care-about-cross-platform" class="headerlink" title="So why do I care about cross-platform?"></a>So why do I care about cross-platform?</h2><p><a href="https://koopjs.github.io/" target="_blank" rel="noopener">KoopJS</a> is an open-source framework powered by community-developed plugins. Making the CLI application available to more and various developers is the key of growing the community.</p><img src="/blog/2019/05/13/Tips-on-developing-cross-platform-Node-js-application/dev-survey.png" title="This is an example image"><p>Developers are in favor of many different platforms, according to <a href="https://insights.stackoverflow.com/survey/2019#technology-_-platforms" target="_blank" rel="noopener">StackOverflow</a>. Linux, Windows, and MacOS all have significant market share. If the CLI application is able to work on all these platforms, developers from anywhere will be able to try it, create a KoopJS plugin/applicatoin, and possible contribute it back to the community.</p><h2 id="Developing-cross-platform-CLI-application"><a href="#Developing-cross-platform-CLI-application" class="headerlink" title="Developing cross-platform CLI application"></a>Developing cross-platform CLI application</h2><p>Though Node.js and many npm modules are cross-platform, it does not mean the application you develop is cross-platform. This is particuarly true when the application is processing the system info and user input.</p><h3 id="Make-use-of-os"><a href="#Make-use-of-os" class="headerlink" title="Make use of os"></a>Make use of <a href="https://nodejs.org/api/os.html" target="_blank" rel="noopener">os</a></h3><p>The Node.js <a href="https://nodejs.org/api/os.html" target="_blank" rel="noopener">os</a> module is the only way to access any platform-specific information, like the OS version, the system hardware information, the temp file folder, etc.</p><p>Don’t assume that you know about the user’s machine and use <code>/tmp</code> in the code. It will blow up.</p><h3 id="Be-careful-about-file-path"><a href="#Be-careful-about-file-path" class="headerlink" title="Be careful about file path"></a>Be careful about file path</h3><p><a href="(https://en.wikipedia.org/wiki/Path_(computing))">File path styles</a> vary from one platform to another. Whenever possible, use the native <a href="https://nodejs.org/api/path.html" target="_blank" rel="noopener">path</a> module to handling file path processing. Don’t the simple string handling (like <code>path.split('\')</code>, <code>paths.join('\')</code>, etc) or regular expression because there is always outlier and it will break.</p><h3 id="Newline-matters"><a href="#Newline-matters" class="headerlink" title="Newline matters"></a>Newline matters</h3><p>Newline is simple?</p><img src="/blog/2019/05/13/Tips-on-developing-cross-platform-Node-js-application/newline.png" title="This is an example image"><p>Although your application may not support so many platforms as listed, it is obvious that <code>\n</code> (Linux and MacOS) and <code>\r\n</code> (Windows) should be at least supported at the same time. Do try <a href="https://nodejs.org/api/os.html#os_os_eol" target="_blank" rel="noopener">os.EOL</a> when processing user input text and generating output.</p><h2 id="Testing-on-different-platforms"><a href="#Testing-on-different-platforms" class="headerlink" title="Testing on different platforms"></a>Testing on different platforms</h2><p>Testing the application at different platforms is a trivial task for human developers. Ideally, we should write tests for the application and run tests at multiple platforms by CI automatically. So write once and test many.</p><p>Many CI/CD service providers support building and testing with different platforms. For example, we can add multiple OSs in the <a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a> configuration:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">os:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">linux</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">osx</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">windows</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">test</span></span><br></pre></td></tr></tbody></table></figure><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>This blog post talks about a few tips from my personal experience on developing the Koop CLI project. For more details on developing cross-platform experience, do checkout the <a href="https://github.com/ehmicky/cross-platform-node-guide" target="_blank" rel="noopener">cross-platform node guide</a> repo. And happy coding.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS ECS continuous deployment with Travis CI</title>
      <link href="/blog/2018/03/19/AWS-ECS-auto-deployment-with-Travis-CI/"/>
      <url>/blog/2018/03/19/AWS-ECS-auto-deployment-with-Travis-CI/</url>
      
        <content type="html"><![CDATA[<p>This article discusses how to build a continuous deployment pipeline for an <a href="https://aws.amazon.com/ecs/" target="_blank" rel="noopener">AWS ECS</a> application using <a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a>.</p><a id="more"></a><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Deploying a docker-base application to the AWS ECS is a tedious task. It requires to push the image to an image repository, create a new task definition with that image, and update the service with the new definition. It is quick but repetitive.</p><p>In large organizations that have rapid deployment cycles, such tasks are usually taken care by CI/CD pipelines, like <a href="https://jenkins.io/index.html" target="_blank" rel="noopener">Jenkins</a>. But for a personal side project<a href="https://jenkins.io/index.html" target="_blank" rel="noopener">https://jenkins.io/index.html</a>, a dedicated CI/CD system is not affordable and it is an overkill lto use</p><p><a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a> is a continuous deployment service that provides free integration and service with public GitHub repositories. If you develop an open-source project at GitHub and add a <code>.travis.yml</code> file, Travis CI can connect with the repository and react to any code change.</p><p>This article assumes you have basic knowledge on AWS ECS and Travis CI.</p><h2 id="Script-Deployment-in-Travis-CI"><a href="#Script-Deployment-in-Travis-CI" class="headerlink" title="Script Deployment in Travis CI"></a>Script Deployment in Travis CI</h2><p>The requirement of the continuous deployment to AWS ECS is simple. Every time a pull request to the master branch is merged, the Travis CI should be noticed and perform the continuous deployment.</p><p>The deployment to AWS ECS requires custom operations and it is not automated by the Travis CI yet. To support sophisticated deployment operations, the Travis CI provides <a href="https://docs.travis-ci.com/user/deployment/script/" target="_blank" rel="noopener">Script Deployment</a> and it allows the developer to execute a specified script for deployment.</p><p>It can be activated by adding a new <code>deploy</code> section in the <code>.travis.yml</code> file in the project repository.</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deployment section in the .travis.yml</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">script</span></span><br><span class="line">  <span class="comment"># specify the deployment script</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">bash</span> <span class="string">deploy.sh</span></span><br><span class="line">  <span class="comment"># specify to deploy with code change a given branch</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">develop</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Deployment-Script"><a href="#Deployment-Script" class="headerlink" title="Deployment Script"></a>Deployment Script</h2><p>The next step is to define tasks for the deployment. We would like to define more repetitive tasks for the Travis CI and leave the most important action to the developer, like clicking the <code>Merge</code> button at the GitHub PR.</p><p>Specifically, these steps are required:</p><ol><li>build the docker image from the source code</li><li>tag the docker image as <code>latest</code></li><li>push the docker image to an image repository</li><li>update the AWS ECS application with the new image</li></ol><p>The first three steps could be done with the <a href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank" rel="noopener">docker CLI</a>. The fourth step actually includes many interactions with AWS, but a very nice library called <a href="https://github.com/silinternational/ecs-deploy" target="_blank" rel="noopener">ecs-deploy</a> could do all things with one line of command!</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install AWS SDK</span></span><br><span class="line">pip install --user awscli</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># install necessary dependency for ecs-deploy</span></span><br><span class="line">add-apt-repository ppa:eugenesan/ppa</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install jq -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># install ecs-deploy</span></span><br><span class="line">curl https://raw.githubusercontent.com/silinternational/ecs-deploy/master/ecs-deploy | \</span><br><span class="line">  sudo tee -a /usr/bin/ecs-deploy</span><br><span class="line">sudo chmod +x /usr/bin/ecs-deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># login AWS ECR</span></span><br><span class="line"><span class="built_in">eval</span> $(aws ecr get-login --region us-east-1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or login DockerHub</span></span><br><span class="line"><span class="comment"># docker login --username $DOCKER_HUB_USER --password $DOCKER_HUB_PSW</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># build the docker image and push to an image repository</span></span><br><span class="line">docker build -t haoliangyu/ecs-auto-deploy .</span><br><span class="line">docker tag haoliangyu/ecs-auto-deploy:latest <span class="variable">$IMAGE_REPO_URL</span>:latest</span><br><span class="line">docker push <span class="variable">$IMAGE_REPO_URL</span>:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># update an AWS ECS service with the new image</span></span><br><span class="line">ecs-deploy -c <span class="variable">$CLUSTER_NAME</span> -n <span class="variable">$SERVICE_NAME</span> -i <span class="variable">$IMAGE_REPO_URL</span>:latest</span><br></pre></td></tr></tbody></table></figure><p>All <code>$VARIABLE_NAME</code> in the deployment script refer to an environment variable. Except <code>PATH</code> and <code>HOME</code>, which are provided by the operation system, you should provide the rest of them:</p><ul><li><code>IMAGE_REPO_URL</code> is the url of a docker image repository. It could be <a href="https://hub.docker.com/" target="_blank" rel="noopener">DockerHub</a> repository name or <a href="https://aws.amazon.com/ecr" target="_blank" rel="noopener">AWS ECR</a> repository url, or any other.</li><li><code>CLUSTER_NAME</code> is the name of the running ECS cluster.</li><li><code>SERVICE_NAME</code> is the name of the running ECS service.</li></ul><p>These values could be hard-coded, but using an environment variable makes the script more secure and portable.</p><p>Note that <code>ecs-deploy</code> deploys to an existing ECS service. If the specified service is not created, it will not try to new one and throw an error instead.</p><h2 id="Continuous-Deployment"><a href="#Continuous-Deployment" class="headerlink" title="Continuous Deployment"></a>Continuous Deployment</h2><p>With the deployment script discussed above, we can write the Travis CI configuration <code>.travis.yml</code>.</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># I am using a nodejs for my demo application</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"node"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># include the docker service so that we can use the docker command in</span></span><br><span class="line"><span class="comment"># the deployment script</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># same as the official documentation</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">script</span></span><br><span class="line"><span class="attr">  script:</span> <span class="string">bash</span> <span class="string">deploy.sh</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><p>The configuration is pretty much the same as the one from the documentation. It requires the <code>docker</code> service for the docker command line tool.</p><p>Then you should add required environment variables in the <code>Settings</code> page of the Travis repository. Additionally, <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, and <code>AWS_DEFAULT_REGION</code> are needed to help accessing AWS.</p><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>Wow, you are done here <span class="github-emoji" style="display:inline;vertical-align:middle;margin:0 3px;color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span> With this setting, you will have a continuous deployment pipeline that reacts to any PR merged into the master branch. And it deploys :-)</p><p>Thank you for reading this blog post. All code in this post could be found in this <a href="https://github.com/haoliangyu/ecs-auto-deploy" target="_blank" rel="noopener">GitHub repository</a> (<span class="github-emoji" style="display:inline;vertical-align:middle;margin:0 3px;color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/2b50.png?v8) center/contain" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span> it if it helps) and it is <a href="https://travis-ci.org/haoliangyu/ecs-auto-deploy" target="_blank" rel="noopener">working</a>.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aws </tag>
            
            <tag> ci </tag>
            
            <tag> deloyment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The unofficial documentation for ArcGIS Open Data APIs</title>
      <link href="/blog/2017/02/11/The-unofficial-documentation-for-ArcGIS-Open-Data-dataset-search-API/"/>
      <url>/blog/2017/02/11/The-unofficial-documentation-for-ArcGIS-Open-Data-dataset-search-API/</url>
      
        <content type="html"><![CDATA[<p><a href="http://opendata.arcgis.com" target="_blank" rel="noopener">ArcGIS Open Data</a> is a great network of governmental and institutional open data. While the data portal service runs on APIs, there is no official documentation of public APIs for ArcGIS Open Data. So this post is to provide the unofficial documentation of ArcGIS Open Data APIs, which are discovered in my work (mostly by accident).</p><a id="more"></a><p>This documentation is also published at <a href="https://gist.github.com/haoliangyu/0d0abcccfd3b25beb8b7597b4b2fc497" target="_blank" rel="noopener">GitHub Gist</a>;</p><h2 id="Dataset-Search-API"><a href="#Dataset-Search-API" class="headerlink" title="Dataset Search API"></a>Dataset Search API</h2><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://data.portal.com/datasets?q=test</span><br></pre></td></tr></tbody></table></figure><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><ul><li><p><strong>q</strong> (string)</p><p>query string for full text search</p></li><li><p><strong>bbox</strong> (unknown)</p><p>boundary box for geographic search</p></li><li><p><strong>required_keywords</strong> (unknown)</p><p>dataset keywords (tags) for search</p></li><li><p><strong>page</strong> (integer)</p><p>current page of results</p></li><li><p><strong>per_page</strong> (integer)</p><p>number of results per page (default: 10)</p></li><li><p><strong>sort_by</strong> (string)</p><p>returned results sorting method:</p><ul><li><code>updated_at</code> (default)</li><li><code>relevance</code></li></ul></li><li><p><strong>sort_order</strong> (string)</p><p>returned results order:</p><ul><li><code>desc</code> (default)</li><li><code>asc</code></li></ul></li></ul><h3 id="Response-Example"><a href="#Response-Example" class="headerlink" title="Response Example"></a>Response Example</h3><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="attr">"display_field"</span>: <span class="string">"FAC_CAT"</span>,</span><br><span class="line">      <span class="attr">"max_record_count"</span>: <span class="number">2000</span>,</span><br><span class="line">      <span class="attr">"record_count"</span>: <span class="number">11</span>,</span><br><span class="line">      <span class="attr">"geometry_type"</span>: <span class="string">"esriGeometryPoint"</span>,</span><br><span class="line">      <span class="attr">"object_id_field"</span>: <span class="string">"FID"</span>,</span><br><span class="line">      <span class="attr">"supported_extensions"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"advanced_query_capabilities"</span>: {</span><br><span class="line">        <span class="attr">"supports_pagination"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"supports_query_related_pagination"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"supports_query_with_distance"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"supports_returning_query_extent"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"supports_statistics"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"supports_order_by"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"supports_distinct"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"supports_query_with_result_type"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"supports_sql_expression"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"supports_advanced_query_related"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"supports_returning_geometry_centroid"</span>: <span class="literal">false</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"supports_advanced_queries"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"dd62922ee5c14d11a187aaf30052404f_0"</span>,</span><br><span class="line">      <span class="attr">"landing_page"</span>: <span class="string">"https://www.arcgis.com/home/item.html?id=dd62922ee5c14d11a187aaf30052404f"</span>,</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"This feature layer, utilizing data from the U.S. Environmental Protection Agency (EPA), displays regional offices. The EPA began operation on December 2, 1970 and it inherited two regional systems from predecessor agencies. The Federal Water Quality Administration which used a nine region system and the Environmental Health Service which had adopted the ten Standard Federal Regions suggested by the Office of Management and Budget (OMB). In order to facilitate easier operations with local and state governments as well as other federal agencies the EPA chose to adopt the OMB Standard Federal Regions which still exist today.<div><br /></div><div><div><img src=\"http://fedmaps.maps.arcgis.com/sharing/rest/content/items/26b532f4bfb14e0eb517c644dcda73c1/data\" /><br /></div><div><i>Regional Office locations</i></div><div><br /></div><div>For more information: <a href=\"https://www.epa.gov/aboutepa\" target=\"_blank\">About EPA</a></div><div>For feedback, please contact: <a href=\"mailto:ArcGIScomNationalMaps@esri.com\" target=\"_blank\">ArcGIScomNationalMaps@esri.com</a></div><div><div><br /></div><div><div>EPA sites of interest<b><br /></b></div><div><b><br /></b></div><div><img src=\"http://fedmaps.maps.arcgis.com/sharing/rest/content/items/d543cdf1e9694f5f985eae5b2dcd36f8/data\" /> <a href=\"https://epa.maps.arcgis.com/home/index.html\" target=\"_blank\">ArcGIS Online Organizational Homepage</a><b><br /></b></div><div><b><br /></b></div><div>Other Federal User Community federally focused content that may interest you</div><div><b><br /></b></div><div><img src=\"http://fedmaps.maps.arcgis.com/sharing/rest/content/items/f83c3452ec074ee08c7f04975578c212/data\" /> <a href=\"http://fedmaps.maps.arcgis.com/home/search.html?q=owner%3AFederal_User_Community%20AND%20tags%3AUS%20EPA&amp;t=content&amp;restrict=false\" target=\"_blank\">U.S. Environmental Protection Agency</a>           <img src=\"http://fedmaps.maps.arcgis.com/sharing/rest/content/items/46785cfb399344a6af50d4514d6ef0f9/data\" /> <a href=\"http://open.fedmaps.opendata.arcgis.com/datasets?q=US+EPA&amp;sort_by=relevance\" target=\"_blank\">Open Data: U.S. EPA</a> </div></div></div></div>"</span>,</span><br><span class="line">      <span class="attr">"extent"</span>: {</span><br><span class="line">        <span class="attr">"coordinates"</span>: [</span><br><span class="line">          [</span><br><span class="line">            <span class="number">-125.676</span>,</span><br><span class="line">            <span class="number">24.242</span></span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            <span class="number">-65.559</span>,</span><br><span class="line">            <span class="number">50.089</span></span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"fields"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"FID"</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"esriFieldTypeInteger"</span>,</span><br><span class="line">          <span class="attr">"alias"</span>: <span class="string">"FID"</span>,</span><br><span class="line">          <span class="attr">"domain"</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">"statistics"</span>: {</span><br><span class="line">            <span class="attr">"duration"</span>: <span class="number">0</span></span><br><span class="line">          },</span><br><span class="line">          <span class="attr">"updated_at"</span>: <span class="string">"2017-02-06T21:06:49.399Z"</span></span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"item_name"</span>: <span class="string">"EPA Regional Offices"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"ItemLayer"</span>,</span><br><span class="line">      <span class="attr">"item_type"</span>: <span class="string">"Feature Layer"</span>,</span><br><span class="line">      <span class="attr">"license"</span>: <span class="string">"<p><img src=\"http://downloads.esri.com/blogs/arcgisonline/esrilogo_new.png\" />This work is licensed under the Esri Master License Agreement.<br /></p><p><a href=\"http://links.esri.com/tou_summary\" target=\"_blank\">View Summary</a> | <a href=\"http://links.esri.com/agol_tou\" target=\"_blank\">View Terms of Use</a></p>"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"EPA Regional Offices"</span>,</span><br><span class="line">      <span class="attr">"owner"</span>: <span class="string">"Federal_User_Community"</span>,</span><br><span class="line">      <span class="attr">"tags"</span>: [</span><br><span class="line">        <span class="string">"A-16"</span>,</span><br><span class="line">        <span class="string">"A16"</span>,</span><br><span class="line">        <span class="string">"U.S. Environmental Protection Agency"</span>,</span><br><span class="line">        <span class="string">"U.S. EPA"</span>,</span><br><span class="line">        <span class="string">"EPA"</span>,</span><br><span class="line">        <span class="string">"regional offices"</span>,</span><br><span class="line">        <span class="string">"regions"</span>,</span><br><span class="line">        <span class="string">"Environmental Protection Agency"</span>,</span><br><span class="line">        <span class="string">"places"</span>,</span><br><span class="line">        <span class="string">"boundaries"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"thumbnail_url"</span>: <span class="string">"https://www.arcgis.com/sharing/rest/content/items/dd62922ee5c14d11a187aaf30052404f/info/thumbnail/EPA_-_Regional_Offices_-_screen_capture.png"</span>,</span><br><span class="line">      <span class="attr">"public"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"created_at"</span>: <span class="string">"2016-09-02T11:50:55.000Z"</span>,</span><br><span class="line">      <span class="attr">"updated_at"</span>: <span class="string">"2017-02-06T21:06:50.911Z"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://services2.arcgis.com/FiaPA4ga0iQKduv3/arcgis/rest/services/EPA_RegionalOffices/FeatureServer/0"</span>,</span><br><span class="line">      <span class="attr">"views"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"quality"</span>: <span class="number">86</span>,</span><br><span class="line">      <span class="attr">"coverage"</span>: <span class="string">"global"</span>,</span><br><span class="line">      <span class="attr">"current_version"</span>: <span class="number">10.41</span>,</span><br><span class="line">      <span class="attr">"comments_enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"service_spatial_reference"</span>: {</span><br><span class="line">        <span class="attr">"wkid"</span>: <span class="number">102100</span>,</span><br><span class="line">        <span class="attr">"latestWkid"</span>: <span class="number">3857</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"metadata_url"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"org_id"</span>: <span class="string">"FiaPA4ga0iQKduv3"</span>,</span><br><span class="line">      <span class="attr">"metadata"</span>: {</span><br><span class="line">        <span class="attr">"published"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"present"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"online_resources"</span>: []</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"structured_license"</span>: {</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"custom"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"This work is licensed under the Esri Master License Agreement.<a href=\"http://links.esri.com/tou_summary\" target=\"_blank\">View Summary</a> | <a href=\"http://links.esri.com/agol_tou\" target=\"_blank\">View Terms of Use</a>"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">"use_standardized_queries"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"sites"</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"PACI"</span>,</span><br><span class="line">          <span class="attr">"url"</span>: <span class="string">"http://paci-esridubaioffice.opendata.arcgis.com"</span>,</span><br><span class="line">          <span class="attr">"logo"</span>: <span class="literal">null</span></span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"main_group_title"</span>: <span class="string">"Open Data - Derived US Independent Establishments and Gov't Corps"</span>,</span><br><span class="line">      <span class="attr">"main_group_description"</span>: <span class="string">"<span style='line-height: 24px; background-color: rgb(255, 255, 255);'><font face='Verdana' size='3'>The group contains a set of map services, web maps and map packages that can be used in a web browser or downloaded to your ArcGIS Desktop application.  The maps may be used as base maps and operational layers to support a variety of applications.</font></span>"</span>,</span><br><span class="line">      <span class="attr">"main_group_thumbnail_url"</span>: <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"metadata"</span>: {</span><br><span class="line">    <span class="attr">"query_parameters"</span>: {</span><br><span class="line">      <span class="attr">"bbox"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"page"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"per_page"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"q"</span>: <span class="string">"*"</span>,</span><br><span class="line">      <span class="attr">"required_keywords"</span>: [],</span><br><span class="line">      <span class="attr">"sort_by"</span>: <span class="string">"updated_at"</span>,</span><br><span class="line">      <span class="attr">"sort_order"</span>: <span class="string">"desc"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"stats"</span>: {</span><br><span class="line">      <span class="attr">"count"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"total_count"</span>: <span class="number">192</span>,</span><br><span class="line">      <span class="attr">"top_tags"</span>: [</span><br><span class="line">        { <span class="attr">"name"</span>: <span class="string">"ocean"</span>, <span class="attr">"count"</span>: <span class="number">62</span> }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Open Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arcgis </tag>
            
            <tag> open data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boundary.Now: a simple tool to extract OSM place boundaries</title>
      <link href="/blog/2017/02/04/Boundary-Now-a-simple-tool-to-extract-OSM-place-boundaries/"/>
      <url>/blog/2017/02/04/Boundary-Now-a-simple-tool-to-extract-OSM-place-boundaries/</url>
      
        <content type="html"><![CDATA[<p>Getting a place boundary is sometimes harder than it looks like.</p><a id="more"></a><p>There are a couple of reasons why it’s hard:</p><ul><li>The boundary data is actually unavailable or not released.</li><li>The boundary data is available, but packaged in a national dataset, like most governmental open data.</li><li>The boundary data is visible, but not downloadable, like the Google map does.</li><li>The boundary data is exportable, but the use is limited, like the Bing map geocoding API does.</li></ul><p>So it’s pretty common for a data analyst to take a lot of effort to find and extract place boundaries. It’s even more painful when we have to download national datasets just for a few cities’ boundary.</p><p>Oh, wait! Isn’t it a free and global geospatial database out there?</p><p>Yeah, <a href="https://www.openstreetmap.org/" target="_blank" rel="noopener">OpenStreetMap</a> is awesome and the great <a href="http://nominatim.openstreetmap.org/" target="_blank" rel="noopener">Nominatim</a> service allows us to search through the OSM database with a place name.</p><p>The only problem is the Nominatim interface is not designed for data extraction, even though the API does return place boundary. So I develop <a href="https://haoliangyu.github.io/boundary.now/"><strong>Boundary.Now</strong></a>, an interface for Nominatim geocoding API to download place boundary.</p><p>Like the original interface, it will provide a search box for the desired place name. In the result list, only search results with boundary data are shown. The boundary data could be downloaded in <strong>GeoJSON</strong>, a format widely used in web development, or in <strong>Shapefile</strong>, a standard format in the GIS world.</p><p>You can open the tool <a href="https://haoliangyu.github.io/boundary.now/"><strong>here</strong></a> and the project is open at <a href="https://github.com/haoliangyu/boundary.now/" target="_blank" rel="noopener">GitHub</a>.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> openstreetmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adding GeoJSON layers to your Leaflet map in TypeScript</title>
      <link href="/blog/2017/02/04/Adding-GeoJSON-layers-in-your-Leaflet-project-in-TypeScript/"/>
      <url>/blog/2017/02/04/Adding-GeoJSON-layers-in-your-Leaflet-project-in-TypeScript/</url>
      
        <content type="html"><![CDATA[<p>Adding a GeoJSON layer to a <a href="http://leafletjs.com/" target="_blank" rel="noopener">Leaflet</a> map in <a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a> has some difference from that in JavaScript.</p><a id="more"></a><p>It’s because the GeoJSON is typed in TypeScript and the type declaration of Leaflet adopts it. So whenever you construct the GeoJSON object in TypeScript, it’s important to declare the type of the variable as GeoJSON type:</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// it's necessary to tell variable type</span></span><br><span class="line"><span class="keyword">let</span> featureCollection: GeoJSON.FeatureCollection<<span class="built_in">any</span>> = {</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">'FeatureCollection'</span>,</span><br><span class="line">  features: [</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'Feature'</span>,</span><br><span class="line">      geometry: {</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">'Point'</span>,</span><br><span class="line">        coordinates: [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">      },</span><br><span class="line">      properties: {}</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// the Leaflet API is the same as the JavaScript one, except for the parameter type requirement</span></span><br><span class="line">L.geoJSON(featureCollection).addTo(<span class="keyword">this</span>.map);</span><br></pre></td></tr></tbody></table></figure><p>For more about the specification and example, take a look at the <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/geojson" target="_blank" rel="noopener">GeoJSON type definition</a>.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geojson </tag>
            
            <tag> leaflet </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using an untyped Leaflet plugin in your TypeScript project</title>
      <link href="/blog/2017/01/25/Using-an-untyped-Leaflet-plugin-in-your-TypeSccript-project/"/>
      <url>/blog/2017/01/25/Using-an-untyped-Leaflet-plugin-in-your-TypeSccript-project/</url>
      
        <content type="html"><![CDATA[<p><a href="http://leafletjs.com/" target="_blank" rel="noopener">Leaflet</a> has a prosperous ecosystem with <a href="http://leafletjs.com/plugins.html" target="_blank" rel="noopener">hundreds of plugins</a>. Most of them are not typed for TypeScript, however, with a minimal setup, you are able to use these plugins in your TypeScript mapping project.</p><a id="more"></a><p>Since TypeScript is definitely typed, a simple workaround is to provide a minimal type declaration file that can expose the plugin functions in the <code>L</code> namespace.</p><p>For example, I would like to display a large GeoJSON file at the browser using the <a href="https://www.mapbox.com/vector-tiles/" target="_blank" rel="noopener">vector tile</a> technique. I can do it in JavaScript with the following code:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get the GeoJSON somewhere</span></span><br><span class="line"><span class="keyword">let</span> geojson = getGeoJSON();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Slice the GeoJSON into vector tiles on-the-fly with L.vectorGrid.slicer()</span></span><br><span class="line"><span class="keyword">let</span> layer = L.vectorGrid.slicer(geojson, {});</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add the tile layer on the map</span></span><br><span class="line">layer.addTo(map);</span><br></pre></td></tr></tbody></table></figure><p>The vector tile plugin <a href="https://github.com/Leaflet/Leaflet.VectorGrid" target="_blank" rel="noopener">Leaflet.VectorGrid</a> isn’t officially typed and you are not able to directly use this plugin because the compiler doesn’t know its existence. So we just need to declare it with a <code>leaflet.vectorgrid.d.ts</code> file</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in the global namesapce "L"</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> L {</span><br><span class="line"></span><br><span class="line">  <span class="comment">// there is a child namespace "vectorGrid"</span></span><br><span class="line">  <span class="keyword">namespace</span> vectorGrid {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// which has a function call "slicer" that takes data and optional</span></span><br><span class="line">    <span class="comment">// configurations. To make it simple, we don't specify the input</span></span><br><span class="line">    <span class="comment">// and output types.</span></span><br><span class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">slicer</span>(<span class="params">data: <span class="built_in">any</span>, options?: <span class="built_in">any</span></span>): <span class="title">any</span></span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Then we are able to use the function in TypeScript</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <reference path="leaflet.vectorgrid.d.ts"/></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'leaflet'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'leaflet.vectorgrid'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> geojson = getGeoJSON();</span><br><span class="line"><span class="keyword">let</span> layer = L.vectorGrid.slicer(geojson)</span><br><span class="line"></span><br><span class="line">layer.addTo(map);</span><br></pre></td></tr></tbody></table></figure><p>Here we go!</p><p>If we want to use more, we could continue to populate the type declaration file and maybe contribute it to the community when it becomes more complete.</p><p>For a fully functional exampe, see <a href="https://github.com/haoliangyu/angular2-leaflet-starter" target="_blank" rel="noopener">angular2-leaflet-starter</a>.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leaflet </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Celebrating the 1,000 data portals at OpenDataDiscovery.org</title>
      <link href="/blog/2017/01/16/Celebrating-the-1-000-data-portals-at-OpenDataDiscovery-org/"/>
      <url>/blog/2017/01/16/Celebrating-the-1-000-data-portals-at-OpenDataDiscovery-org/</url>
      
        <content type="html"><![CDATA[<p>I am pleased to announce that <a href="http://www.opendatadiscovery.org/" target="_blank" rel="noopener">OpenDataDiscovery.org</a> is now tracking more than 1,000 open data portals, 40% of data portals in the world!</p><a id="more"></a><p>A map of all recorded 329 cities / provinces / countries worldwide, in which each color category includes 20% of all portals.</p><p>Thanks to <a href="https://www.opendatasoft.com/" target="_blank" rel="noopener">OpenDataSoft</a>‘s comprehensive open data portal survey (see <a href="https://opendatainception.io/" target="_blank" rel="noopener">their blog</a>), I am able to quickly identify a list of important open data service providers. So far seven major open data service providers have been supported:</p><ul><li><a href="http://opendata.arcgis.com/" target="_blank" rel="noopener">ArcGIS Open Data</a> (595 portals, 26,281 datasets)</li><li><a href="http://ckan.org/" target="_blank" rel="noopener">CKAN</a> (89 portals, 842,154 datasets)</li><li><a href="http://www.nucivic.com/dkan/" target="_blank" rel="noopener">DKAN</a> (40 portals, 14,289 datasets)</li><li><a href="http://geonode.org/" target="_blank" rel="noopener">GeoNode</a> (10 portals, 9,604 datasets)</li><li><a href="http://junar.com" target="_blank" rel="noopener">Junar</a> (11 portals, 1,860 datasets)</li><li><a href="https://www.opendatasoft.com/" target="_blank" rel="noopener">OpenDataSoft</a> (79 portals, 6,084 datasets)</li><li><a href="http://socrata.com/" target="_blank" rel="noopener">Socrata</a> (177 portals, 110,130 datasets)</li></ul><p>As of 01/16/2017, the total number of datasets opened at these portals is more than 1 million! Also, thousands of data categories and publishers, and nearly a million data tags have been identified. This project just reveals an immense and existing world of open data and all these numbers are still likely to be underestimated.</p><p>For the following months, I will focus on analyzing the existing/coming data and building better data visualization. As the portal level metadata collection procedure is close to done, it is also time to explore the collection of the dataset level metadata.</p><p>I can wait to work on it to see what story this data is telling!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> open data </tag>
            
            <tag> OpenDataDiscovery.org </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Work, Life, 2016</title>
      <link href="/blog/2016/12/31/Work-Life-2016/"/>
      <url>/blog/2016/12/31/Work-Life-2016/</url>
      
        <content type="html"><![CDATA[<p>2016 is a big year for me.</p><a id="more"></a><p>This is the first year after my graduation. I moved away from the university and settled down at downtown to start my new life. Being a web developer in a small startup is very different from being a student in school. In school there are always paths to follow: the spring and fall curriculum, the study plan of the course, the mentorship of the professor. In a startup, things are less organized and more dynamic. I make my work plan, develop at both ends of our application, help GIS Analysts in the company to automate data pipeline, discuss new features with clients, lead internal code safari, and experiment new technologies for our platform. Every day is a new and challenging day. That’s very exciting.</p><p>Of course challenges mean a lot of work and the trial to keep up with this fast-peace industry means even more. I become a full-time developer. I mean full-time as day and night.</p><p>My colleague said I was having two jobs: one at the daytime working in the office, and another at the nighttime working at home. That’s true, though the nighttime job is not billable and sometimes more challenging than the daytime one.</p><p>One cruel fact of this industry is that the concepts, trends, and technologies can be changed in just 2 or 3 years. It’s harder when you are not in a CS major (yeah I am the old-class geographer!). At 2016 I took numerous hours to stay with the leading wave of techs:</p><ul><li>Learn how to write in<a href="https://github.com/lukehoban/es6features#readme" target="_blank" rel="noopener">JavaScript ES6</a></li><li>Learn how to develop application with <a href="https://angular.io/" target="_blank" rel="noopener">Angular 2</a> and <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a></li><li>Play with <a href="http://getbootstrap.com/" target="_blank" rel="noopener">Bootstrap</a> and <a href="https://material.angularjs.org/latest/" target="_blank" rel="noopener">Material Design</a></li><li>Understand <a href="https://en.wikipedia.org/wiki/Vector_tiles" target="_blank" rel="noopener">vector tile</a> and figure out the way to generate it and use it with <a href="http://leafletjs.com/" target="_blank" rel="noopener">Leaflet</a> / <a href="https://github.com/mapbox/mapbox-gl-js" target="_blank" rel="noopener">Mapbox GL</a></li><li>Get deeper with DevOps tools like <a href="https://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant</a>, <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>,and <a href="https://www.nginx.com/" target="_blank" rel="noopener">NGNIX</a></li><li>Get familar with AWS EC2 and AutoScale service</li></ul><p>I also spent much time on <a href="https://github.com/haoliangyu/basic-data-structure" target="_blank" rel="noopener">data structures</a> and <a href="https://github.com/haoliangyu" target="_blank" rel="noopener">algorithms</a> in order to be a qualified software engineer in the future.</p><p>But on the other hand, the software industry is warm as we believe in open source and knowledge sharing. <a href="https://github.com" target="_blank" rel="noopener">GitHub</a>, <a href="http://stackoverflow.com/" target="_blank" rel="noopener">StackOverflow</a>, <a href="http://thespatialcommunity.org/" target="_blank" rel="noopener">The Spatial Community Slack Channel</a>, and many other tech blogs have been my primary learning sources. I am glad that I was introduced into the rapidly developing world of open source GIS. Their generous sharing has been so beneficial to my work and side-projects.</p><p>With the hope of helping the future newbee, I started to publish open source projects with the highest quality I could pursue. This is my nighttime job :-P. So far, I have done</p><ul><li>9 npm modules (<a href="https://www.npmjs.com/~haoliang" target="_blank" rel="noopener">see here</a>)</li><li>2 Angular 2 mapping project demo with <a href="https://github.com/haoliangyu/angular2-leaflet-starter" target="_blank" rel="noopener">Leaflet</a> or <a href="https://github.com/haoliangyu/angular2-mapboxgl-starter" target="_blank" rel="noopener">Mapbox GL</a></li><li>1 fully operating website (<a href="http://opendatadiscovery.org/#map-page" target="_blank" rel="noopener">OpenDataDiscovery.org</a>)</li><li>29 pull requests to community projects</li></ul><p>I have got the opportunity to learn and test new knowledge that I don’t use in my daytime job. As a benefit, I can move ahead the company and be able to introduce what I learn into the development practice in NBT Solutions.</p><p>Among all of these, I would like to highlight the <a href="https://github.com/haoliangyu/OpenDataDiscovery.org" target="_blank" rel="noopener">Open Data Discovery</a> project, the monster consuming one third of my spare time!</p><p>Like all the others who start their side projects, all I wanted to do initially was simply to make an open data map about <a href="https://www.data.gov/" target="_blank" rel="noopener">data.gov</a>. But it opened a world much border than I expect to me and there were so many to explore. This website ends up</p><ul><li>supporting 3 major open data portal platforms: <a href="http://ckan.org/" target="_blank" rel="noopener">CKAN</a>, <a href="http://www.nucivic.com/dkan/" target="_blank" rel="noopener">DKAN</a>, and <a href="http://socrata.com/" target="_blank" rel="noopener">Socrata</a></li><li>tracking more than 300 open data portals worldwide</li><li>using two AWS EC2 servers for website hosting and vector tile generation</li><li>storing ~1 million rows of data, which is open to download</li></ul><p>and more is under development. Scaling up a project feels great and the <a href="https://discuss.newbeeokfn.org/t/project-to-monitor-the-status-of-open-data-portals/3927" target="_blank" rel="noopener">feedback</a> looks great too.</p><p>After doing this amount of work, it make me feels I am no longer a newbee knowing nothing. I am confident to walk out and reach out. In 2016 I attended two conferences, 2016 SIG/GIS Conference and 2016 NYS Geosptial Summit. I co-founded the <a href="http://maptime.io/buffalo/" target="_blank" rel="noopener">MaptimeBUF</a>, a local meetup for open source GIS, and gave the openning talk <a href="https://github.com/MaptimeBUF/intro-to-osm" target="_blank" rel="noopener">Introduce to OpenStreetMap</a>. In December, I gave another talk, <a href="https://github.com/haoliangyu/intro-to-leaflet" target="_blank" rel="noopener">Make an Interactive Map with Leaflet</a>, at the local JavaScript meetup <a href="https://www.meetup.com/Buffalojs/" target="_blank" rel="noopener">MaptimeBUF</a>.</p><p>I spent my vocation at Washington DC and Ottawa, the two beautiful and historical capitals, and finished my city trip at northeast America. I watched my fist NFL game and the first star war movie. I started skiing as the winter came and got myself on more difficult trails :-)</p><p>Finally I got the working VISA. Good luck 2016.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>The Launch of OpenDataDiscovery.org</title>
      <link href="/blog/2016/10/10/The-Launch-of-OpenDataDiscovery.org/"/>
      <url>/blog/2016/10/10/The-Launch-of-OpenDataDiscovery.org/</url>
      
        <content type="html"><![CDATA[<p>After several months’ work at my spare time, I finally publish the first version of my side-project <a href="http://opendatadiscovery.org/" target="_blank" rel="noopener">OpenDataDiscovery.org</a>. It is a step to answer this very simple question in my mind: <strong>How many open datasets do we have on earth?</strong></p><a id="more"></a><p>I don’t remember exactly when I started thinking about this question. It seems to be natural to ask, but very easy to ignore at the era of open data blooming.</p><p>Just look around. Every people, every government, every institute is talking about open data and releasing their data. EPA, NOAA, NOAA, and many other research institutes provide similar data from different angles about the same aspect of air pollution. Both USGS and USDA publish their soil survey. Numerous federal and local agencies are building their own data portals. Not to mention many research institutes have been doing that for years.</p><p>The rapidly increasing number of data providers and open data creates a view of prosperity, which is going to create another problem: we are walking out of the data desert and now into a data jungle. When the available data is not as much as today, figuring out what and how data are published is not very difficult as there is a small market. However, within a data jungle, it may be easy to understand the status of data opening at the domain you are familiar with, but difficult to look beyond. It is not just because increasing open data brings increasing information, but there are more things happening outside our individual’s knowledge. We tend to be lost in the numerous options of data and miss the whole picture.</p><p>Therefore, when I try to answer my initial question, I know there is a lot data at anywhere but cannot figure out even an estimate.</p><p>The methodology to answer this question is not complex. I just need to collect information from all data portals and create the overview of the world of open data. The difficult part is <code>all data portals</code>. Fortunately, in the open data industry, there are dominant data portal platform providers, who are willing to open the API for data harvesting. These open API allows developers to collect rich information from each individual portal based on their platform, including dataset number, tag, category, publisher etc.</p><p>All I need is a program that could help me automatically collect information from related portals and provide a summary view. So I develop the application <a href="http://opendatadiscovery.org/" target="_blank" rel="noopener">OpenDataDiscovery.org</a>, which runs the server for data collection and presents the map view of all data portals on earth.</p><p>Today the OpenDataDiscovery.org has been up and running. It is collecting information for more than 100 CKAN instances (<a href="http://ckan.org/instances/" target="_blank" rel="noopener">see the list</a>) and presents the status for these portals. As it update in a weekly basis, it is able to keep track of the status of worldwide data opening.</p><p>Like a puzzle game, it needs us to put every piece into the frame in order to retrieve the overall view. By continuously adding portals into OpenDataDiscovery.org, it will eventually present a full and live picture of the world of open data. Let’s see!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> open data </tag>
            
            <tag> OpenDataDiscovery.org </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>geojson-multiply: a simple package to pack single tyle geojson features</title>
      <link href="/blog/2016/05/07/geojson-multiply-a-simple-library-to-pack-single-type-geojson-features/"/>
      <url>/blog/2016/05/07/geojson-multiply-a-simple-library-to-pack-single-type-geojson-features/</url>
      
        <content type="html"><![CDATA[<p>Some PostGIS functions only accept multi type geometry, so I write a simple geojson utility package to help me aggregate geojson features.</p><a id="more"></a><p>The basic purpose of <code>geojson-multiply</code> is to generate a <code>MutliPoint</code>/<code>MultiLineString</code>/<code>MultiPolygon</code> geojson feature from many <code>Point</code>/<code>LineString</code>/<code>Polygon</code> geojson features. So this package provides a function</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiply(geojsons[, options])</span><br></pre></td></tr></tbody></table></figure><p>Where the <code>geojsons</code> could be a geojson feature, an array of geojson features, or a geojson feature collection</p><p>Not just the coordinates, the <code>multiply()</code> also supports the aggregation of properties. Its <code>options</code> parameter accepts two input:</p><ul><li><p><code>properties</code> - the default properties of result geojson</p></li><li><p><code>onEachFeature</code> - a function to aggregate properties. It has four parameters:</p><ul><li><p><code>properties</code> - the result geojson’s properties</p></li><li><p><code>featureProp</code> - input feature geojson’s properties</p></li><li><p><code>index</code> - input feature geojson’s index in the array</p></li><li><p><code>geojsons</code> - geojson array.</p></li></ul></li></ul><p>It takes the form of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">Array.reduce()</a> and make the aggregation pretty straightforward:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> multiply = <span class="built_in">require</span>(<span class="string">'geojson-multiply'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> geojsonA = {</span><br><span class="line">  type: <span class="string">'Feature'</span>,</span><br><span class="line">  geometry: { <span class="attr">type</span>: <span class="string">'Point'</span>, <span class="attr">coordinates</span>: [<span class="number">12</span>, <span class="number">43</span>] },</span><br><span class="line">  properties: { <span class="attr">count</span>: <span class="number">5</span> }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> geojsonB = {</span><br><span class="line">  type: <span class="string">'Feature'</span>,</span><br><span class="line">  geometry: { <span class="attr">type</span>: <span class="string">'Point'</span>, <span class="attr">coordinates</span>: [<span class="number">13</span>, <span class="number">34</span>] },</span><br><span class="line">  properties: { <span class="attr">count</span>: <span class="number">5</span> }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> onEachFeature = <span class="function"><span class="keyword">function</span>(<span class="params">properties, featureProp</span>) </span>{</span><br><span class="line">  properties.count += featureProp.count;</span><br><span class="line">  <span class="keyword">return</span> properties;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = multiply([geojsonA, geojsonB], {</span><br><span class="line">  properties: { <span class="attr">count</span>: <span class="number">0</span> },</span><br><span class="line">  onEachFeature: onEachFeature</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">The reuslt geojson should be</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">  type: 'Feature'</span></span><br><span class="line"><span class="comment">  geometry: {</span></span><br><span class="line"><span class="comment">    type: 'MultiPoint',</span></span><br><span class="line"><span class="comment">    coordinates: [[12, 43], [14, 34]]</span></span><br><span class="line"><span class="comment">  },</span></span><br><span class="line"><span class="comment">  properties: {</span></span><br><span class="line"><span class="comment">    count: 10</span></span><br><span class="line"><span class="comment">  }</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>This package has been published at <a href="https://www.npmjs.com/package/geojson-multiply" target="_blank" rel="noopener">npm</a>. If you think it’s helpful, just install and try!</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install geojson-multiply --save</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> geojson </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Making Map with Leaflet in TypeScript</title>
      <link href="/blog/2016/05/06/Making-A-Map-with-Leaflet-in-TypeScript/"/>
      <url>/blog/2016/05/06/Making-A-Map-with-Leaflet-in-TypeScript/</url>
      
        <content type="html"><![CDATA[<p><strong>UPDATE 27/12/2016</strong>: update for TypeScript 2.0</p><p>Recently I am working on a web mapping project based on <a href="https://angular.io/" target="_blank" rel="noopener">Angular 2</a>. There isn’t much data on how to create web map using <a href="http://leafletjs.com/" target="_blank" rel="noopener">Leaflet</a> in TypeScript. So I think it’s good to write a post on it.</p><a id="more"></a><h3 id="Leaflet-Typed"><a href="#Leaflet-Typed" class="headerlink" title="Leaflet, Typed"></a>Leaflet, Typed</h3><p>TypeScript is definitely typed so you need to provide a type declaration for Leaflet first. The installation of type declaration is much easier at TypeScript 2.0 for its direct support of <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> and you just needs</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Type declaration <span class="keyword">for</span> GeoJSON, a dependency</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">npm install @types/geojson</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Type declaration <span class="keyword">for</span> Leaflet</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">npm install @types/leaflet</span><br></pre></td></tr></tbody></table></figure><p>It will download the type declaration publish <a href="http://definitelytyped.org/" target="_blank" rel="noopener">DefinitelyTyped</a> and relate to the installed package. Simple and no more package manager!</p><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><p>Using Leaflet in TypeScript doesn’t have an essential difference with using it in JavaScript. The only difference is, in the typed environment, many things are declared as class. So you may need to new a class before directly using it:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> L.Map(<span class="string">'map'</span>, {</span><br><span class="line">  center: <span class="keyword">new</span> L.LatLng(<span class="number">40.731253</span>, <span class="number">-73.996139</span>),</span><br><span class="line">  zoom: <span class="number">12</span>,</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>Also you will need to provide extra type information when using function:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map.on(<span class="string">'click'</span>, (e: LeafletMouseEvent) => {</span><br><span class="line">  <span class="keyword">let</span> marker = L.marker(e.latlng)</span><br><span class="line">  .bindPopup(<span class="string">'Popup'</span>)</span><br><span class="line">  .addTo(map)</span><br><span class="line">  .openPopup();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>And that’s it. You should have no extra difficult in using Leaflet in TypeScript, if you are familiar with using it in JavaScript and has read the type declaration on what you need.</p><p>Hope you enjoy the journey with TypeScript :)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leaflet </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gtran: a promised, consistent, user-friendly GeoJson conversion package</title>
      <link href="/blog/2016/02/25/gtran-a-promised-consistent-user-friendly-GeoJson-conversion-package/"/>
      <url>/blog/2016/02/25/gtran-a-promised-consistent-user-friendly-GeoJson-conversion-package/</url>
      
        <content type="html"><![CDATA[<p>Do you still feel inconvenient when converting GeoJson to other data formats in Node.js?</p><a id="more"></a><p>GeoJson is one of simplest geographic data format. If we search for data conversion packages at <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm.org</a>, there will be a long list packages: <a href="https://www.npmjs.com/package/shapefile" target="_blank" rel="noopener">shapefile</a> for shapefile, <a href="https://www.npmjs.com/package/tokml" target="_blank" rel="noopener">tokml</a> for kml, <a href="https://www.npmjs.com/package/geojson2dsv" target="_blank" rel="noopener">geojson2dcsv</a> for csv, <a href="https://www.npmjs.com/package/osm-and-geojson" target="_blank" rel="noopener">osm-and-geojson</a> for osm package, <a href="https://www.npmjs.com/package/geojson2" target="_blank" rel="noopener">geojson2</a> for multiple formats, <a href="https://www.npmjs.com/package/ogr2ogr" target="_blank" rel="noopener">org2org</a> and <a href="https://www.npmjs.com/package/gdal" target="_blank" rel="noopener">gdal</a> as data solutions… However, I still felt very inconvenient when I developed a GeoJson handling module a few months ago.</p><h1 id="Why-inconvenient"><a href="#Why-inconvenient" class="headerlink" title="Why inconvenient?"></a>Why inconvenient?</h1><p>From my point of view, there are a few problems:</p><ul><li><p>Most packages are designed for one specific data format.</p></li><li><p>Each package is written in a style different from the other.</p></li><li><p>Some packages require external libraries,like <a href="http://www.gdal.org/" target="_blank" rel="noopener">gdal</a>, which aren’t npm-able.</p></li><li><p>Most package aren’t asynchronous or promised. (maybe just a personal problem)</p></li></ul><p>As a result, in order to make them work together, one will need to learn how to use these diverse packages, customize code to handle their diverse input/output, and write some comments for the future project maintainer.</p><p>Well, it’s not very fun.</p><h1 id="Gtran-the-solution"><a href="#Gtran-the-solution" class="headerlink" title="Gtran: the solution"></a>Gtran: the solution</h1><p>The programmer’s way to handle unhappiness is to write something that make him happy :) What I want is a package with following features:</p><ul><li><p>Able to work with multiple formats</p></li><li><p>Consistent and simple: functions and their input/output</p></li><li><p>Completely npm-able</p></li><li><p>Asynchronous</p></li></ul><p>And here comes <strong><a href="https://www.npmjs.com/package/gtran" target="_blank" rel="noopener">gtran</a></strong>.</p><h1 id="What-does-gtran-do"><a href="#What-does-gtran-do" class="headerlink" title="What does gtran do?"></a>What does gtran do?</h1><p><strong>gtran</strong> wraps several existing npm packages to provide</p><ul><li><p>from/to conversion of multiple formats: .shp, .kml, .kmz, .csv, and TopoJson.</p></li><li><p>consistent functions: from[format name]() and to[format name]()</p></li><li><p>simple input/output: geojson or file name</p></li><li><p>asynchronous ability with your favorite promise library (<a href="https://www.npmjs.com/package/bluebird" target="_blank" rel="noopener">bluebird</a>, <a href="https://www.npmjs.com/package/promise" target="_blank" rel="noopener">promise</a>, <a href="https://www.npmjs.com/package/q" target="_blank" rel="noopener">Q</a>, or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">native</a>).</p></li><li><p>minimal installation: each format support is provide by a child package gtran-xxx.</p></li></ul><p>It could be installed with <code>npm install gtran</code>.</p><h1 id="How-could-it-be-used"><a href="#How-could-it-be-used" class="headerlink" title="How could it be used?"></a>How could it be used?</h1><p>A complete use guide could be found at the <a href="https://github.com/haoliangyu/gtran" target="_blank" rel="noopener">GitHub repo</a> and here is a small use case:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gtran = <span class="built_in">require</span>(<span class="string">'gtran'</span>);</span><br><span class="line"></span><br><span class="line"># Specify the promise library if necessary</span><br><span class="line">gtran.setPromiseLib(<span class="built_in">require</span>(<span class="string">'bluebird'</span>));</span><br><span class="line"></span><br><span class="line"># Read shapefile</span><br><span class="line">gtran.fromShp(<span class="string">'source.shp'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> geojson = object;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"># Save geojson into shapefile</span><br><span class="line">gtran.toShp(geojson, <span class="string">'point.shp'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">fileNames</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'SHP files have been saved at:'</span> + fileNames.toString());</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"># Read csv file</span><br><span class="line"># Assume the test.csv has two columns: latitude and longitude</span><br><span class="line">gtran.fromCSV(<span class="string">'source.csv'</span>, {</span><br><span class="line">    mapping: { <span class="attr">x</span>: <span class="string">'longitude'</span>, <span class="attr">y</span>: <span class="string">'latitude'</span> }</span><br><span class="line">})</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> geojson = object;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"># Save geojson into a csv file</span><br><span class="line">gtran.toCSV(geojson, <span class="string">'point.csv'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">fileName</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'CSV file has been saved at:'</span> + fileName);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>Hope you enjoy it. If you find a bug or want a new feature, just create an <a href="https://github.com/haoliangyu/gtran/issues" target="_blank" rel="noopener">issue</a> and I will appreciate it :-)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> project </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lazy man&#39;s package of nationwide U.S. boundaries</title>
      <link href="/blog/2015/12/05/Lazy-man-s-package-of-U-S-boundaries/"/>
      <url>/blog/2015/12/05/Lazy-man-s-package-of-U-S-boundaries/</url>
      
        <content type="html"><![CDATA[<p>I have been doing GIS work for quite a while and I do hate to download data from multiple sites every time. So I decide to collect those commonly geospatial data and make my own database. Of course, like all open-source people do, I’d love to share my work with you. The first release is the U.S. nationwide U.S. boundary. This dataset include <strong>nation</strong>, <strong>state</strong>, <strong>county</strong>, <strong>place</strong>, <strong>census block</strong>, and <strong>census tract</strong>. The source data come from U.S. Census Bureau and you can find the metadata <a href="https://www.census.gov/geo/maps-data/data/tiger-cart-boundary.html" target="_blank" rel="noopener">here</a>.</p><p>Multiple formats provided: <strong>shapefile</strong>, <strong>geojson</strong>, and a <strong>postgis</strong> database dump.<a id="more"></a></p><h2 id="shapefile-geojson"><a href="#shapefile-geojson" class="headerlink" title="shapefile/geojson"></a>shapefile/geojson</h2><table><thead><tr><th>Resolution</th><th>1:500,000</th><th>1:5,000,000</th><th>1:20,000,000</th></tr></thead><tbody><tr><td>Nation</td><td></td><td><a href="http://1drv.ms/1Q7B59y" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1Q7Bgln" target="_blank" rel="noopener">GeoJson</a></td><td><a href="http://1drv.ms/1OaB9j0" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1Q7BhFR" target="_blank" rel="noopener">GeoJson</a></td></tr><tr><td>State</td><td><a href="http://1drv.ms/1OaBfqW" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1XKAjUs" target="_blank" rel="noopener">GeoJson</a></td><td><a href="http://1drv.ms/1XKAaAg" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1XKAmzF" target="_blank" rel="noopener">GeoJson</a></td><td><a href="http://1drv.ms/1XKAcsb" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1XKAu25" target="_blank" rel="noopener">GeoJson</a></td></tr><tr><td>County</td><td><a href="http://1drv.ms/1YR7XVF" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1XKAjUs" target="_blank" rel="noopener">GeoJson</a></td><td><a href="http://1drv.ms/1YR81EY" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1XKAmzF" target="_blank" rel="noopener">GeoJson</a></td><td><a href="http://1drv.ms/1YR82sq" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1XKAu25" target="_blank" rel="noopener">GeoJson</a></td></tr><tr><td>Census Tract</td><td><a href="http://1drv.ms/1TsP5Zm" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1TsPf2U" target="_blank" rel="noopener">GeoJson</a></td><td></td><td></td></tr><tr><td>Census Block</td><td><a href="http://1drv.ms/1TsPafL" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1TsP9s6" target="_blank" rel="noopener">GeoJson</a></td><td></td><td></td></tr><tr><td>Place</td><td><a href="http://1drv.ms/1jViGyB" target="_blank" rel="noopener">Shapefile</a>/<a href="http://1drv.ms/1jViD63" target="_blank" rel="noopener">GeoJson</a></td><td></td><td></td></tr></tbody></table><h2 id="postgis"><a href="#postgis" class="headerlink" title="postgis"></a>postgis</h2><p>Download <a href="http://1drv.ms/1JtYaSe" target="_blank" rel="noopener">U.S. boundary database</a></p><p>The data links are also at <a href="https://github.com/haoliangyu/us-boundary" target="_blank" rel="noopener">GitHub</a>.</p><p>Ok, enjoy the data :)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> open data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Generating masks from Landsat 8 image in ArcMap</title>
      <link href="/blog/2015/05/09/Generating-masks-from-Landsat-8-image-in-ArcMap/"/>
      <url>/blog/2015/05/09/Generating-masks-from-Landsat-8-image-in-ArcMap/</url>
      
        <content type="html"><![CDATA[<p>Two months ago I have written a small python package <a href="https://github.com/haoliangyu/pymasker" target="_blank" rel="noopener">pymasker</a> to generate mask from the Quality Assessment band of Landsat 8 image and MODIS land products. This package is gaining popularity, But scripting may not be convenient for users who are not familiar with programming, therefore I create a ArcMap python toolbox based on this package for interactive masking.</p><a id="more"></a><p>The <strong>ArcMasking</strong> toolbox contains two script tools, one designed for Landsat 8 QA band and one for generic quality assessment bits in other NASA remote sensing products like MODIS.</p><p>This tool can be download at <a href="https://github.com/haoliangyu/arcmasker/releases/tag/ArcMasker_0.1" target="_blank" rel="noopener">GitHub</a>. After unzipping the package, you could open the ArcMasker.tbx file at the Catalog window in ArcMap and find following tools.</p><h2 id="From-Landsat-8-QA-Band"><a href="#From-Landsat-8-QA-Band" class="headerlink" title="From Landsat 8 QA Band"></a>From Landsat 8 QA Band</h2><hr><p>This tool is used to create masks from the Quality Assessment band of Landsat 8 OLI image. It requires several inputs:</p><ul><li><p><strong>Quality Assessment Band</strong> of Landsat 8 image</p></li><li><p><strong>Mask type</strong> including cloud, cirrus, water, snow or vegetation</p></li><li><p><strong>Confidence Level</strong> that indicates the likelihood of existing of specific situation. You can also choose to include confidence level above what has been selected.</p></li><li><p><strong>Output Mask</strong> saving path</p></li></ul><h2 id="From-Quality-Assessment-Bits"><a href="#From-Quality-Assessment-Bits" class="headerlink" title="From Quality Assessment Bits"></a>From Quality Assessment Bits</h2><hr><p>This tool is used to create masks from other NASA remote sensing products with general quality assessment bit like <a href="https://github.com/haoliangyu/pymasker/wiki/MODIS-use-sample" target="_blank" rel="noopener">MODIS land products</a>. As each portion of QA bits suggests a certain condition of the image, this toolbox simply examines the value of specific portion of QA bits and generates mask accordingly. Required inputs include:</p><ul><li><p><strong>Quality Assessment Band</strong></p></li><li><p><strong>Bit Position</strong> that indicates where the desired portion of bits starts.</p></li><li><p><strong>Bit Length</strong> that indicates the length of bits.</p></li><li><p><strong>Bit Value</strong> that indicates the desired situation.</p></li><li><p><strong>Output Mask</strong> saving path</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arcgis </tag>
            
            <tag> remote sensing </tag>
            
            <tag> landsat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Converting C# Data Value to ArcObject Raster Pixel Value</title>
      <link href="/blog/2015/03/22/Converting-C-Data-Value-to-ArcObject-Raster-Pixel-Value/"/>
      <url>/blog/2015/03/22/Converting-C-Data-Value-to-ArcObject-Raster-Pixel-Value/</url>
      
        <content type="html"><![CDATA[<p>The length of remote sensing pixel value is constrained by a predefined pixel value type. It is an unchangeable property for each remote sensing image and saving an unsupported value to a image may cause unpredictable errors like application crash or information loss resulted from implicit data type conversion.</p><a id="more"></a><p>If you are developing application based on ArcObject, you could know the pixel type of a raster layer simply with following code.</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IRasterLayer rasterLayer = (IRasterLayer)layer;</span><br><span class="line">IRasterProps rasterProps = (IRasterProps)rasterLayer.Raster;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the pixel type of you raster layer</span></span><br><span class="line">rstPixelType pixelType = rasterProps.PixelType;</span><br></pre></td></tr></tbody></table></figure><p>You can find a full list and detailed explanation of ArcObject raster pixel types in <a href="http://resources.esri.com/help/9.3/arcgisengine/java/api/arcobjects/com/esri/arcgis/geodatabase/rstPixelType.html" target="_blank" rel="noopener">this page</a>.</p><p>Not every raster pixel types has a corresponding C# value type. So I make a list for those pixels types having relative in C# so that we can make correct conversion while developing.</p><table><thead><tr><th>ArcMap Pixel Type</th><th>Description</th><th>Corresponding C# Data Type</th><th>Supported</th></tr></thead><tbody><tr><td>PT_UNKNOWN</td><td>unknown</td><td></td><td>No</td></tr><tr><td>PT_U1</td><td>1 bit</td><td></td><td>No</td></tr><tr><td>PT_U2</td><td>2 bit</td><td></td><td>No</td></tr><tr><td>PT_U4</td><td>4 bit</td><td></td><td>No</td></tr><tr><td>PT_UCHAR</td><td>unsigned 8 bit integer</td><td>Byte</td><td>Yes</td></tr><tr><td>PT_CHAR</td><td>8 bit integer</td><td>SByte</td><td>Yes</td></tr><tr><td>PT_USHORT</td><td>unsigned 16 bit integer</td><td>UInt16</td><td>Yes</td></tr><tr><td>PT_SHORT</td><td>16 bit integer</td><td>Int16</td><td>Yes</td></tr><tr><td>PT_ULONG</td><td>unsigned 32 bit integer</td><td>UInt32</td><td>Yes</td></tr><tr><td>PT_LONG</td><td>32 bit integer</td><td>Int32</td><td>Yes</td></tr><tr><td>PT_FLOAT</td><td>single precision floating point</td><td>Single</td><td>Yes</td></tr><tr><td>PT_DOUBLE</td><td>double precision floating point</td><td>Double</td><td>Yes</td></tr><tr><td>PT_COMPLEX</td><td>single precision complex</td><td></td><td>No</td></tr><tr><td>PT_DCOMPLEX</td><td>double precision complex</td><td></td><td>No</td></tr><tr><td>PT_CSHORT</td><td>short integer complex</td><td></td><td>No</td></tr><tr><td>PT_CLONG</td><td>long integer complex</td><td></td><td>No</td></tr></tbody></table><p>Based on this table, I write a function to wrap the conversion from C# data type to valid ArcObject pixel value type. I use it in my project <a href="https://github.com/haoliangyu/ares" target="_blank" rel="noopener">ArcMap Raster Edit Suite</a> and it work pretty well.</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag"><summary></span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Convert the csharp value to the ArcObject pixel value.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag"></summary></span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag"><param name="csharpValue"></span>Cshapr value<span class="doctag"></param></span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag"><param name="pixelValueType"></span>The pixel type of ouput value<span class="doctag"></param></span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag"><param name="pixelValue"></span>Output pixel value<span class="doctag"></param></span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag"><returns></span>A value indicating whether the convention is successful<span class="doctag"></returns></span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">CSharpValue2PixelValue</span>(<span class="params"><span class="keyword">object</span> csharpValue, rstPixelType pixelValueType, <span class="keyword">out</span> <span class="keyword">object</span> pixelValue</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">switch</span> (pixelValueType)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">case</span> rstPixelType.PT_UCHAR:</span><br><span class="line">                pixelValue = (<span class="keyword">object</span>)Convert.ToByte(csharpValue);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> rstPixelType.PT_CHAR:</span><br><span class="line">                pixelValue = (<span class="keyword">object</span>)Convert.ToSByte(csharpValue);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> rstPixelType.PT_SHORT:</span><br><span class="line">                pixelValue = (<span class="keyword">object</span>)Convert.ToInt16(csharpValue);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> rstPixelType.PT_USHORT:</span><br><span class="line">                pixelValue = (<span class="keyword">object</span>)Convert.ToUInt16(csharpValue);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> rstPixelType.PT_CLONG:</span><br><span class="line">                pixelValue = (<span class="keyword">object</span>)Convert.ToInt32(csharpValue);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> rstPixelType.PT_ULONG:</span><br><span class="line">                pixelValue = (<span class="keyword">object</span>)Convert.ToUInt32(csharpValue);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> rstPixelType.PT_FLOAT:</span><br><span class="line">                pixelValue = (<span class="keyword">object</span>)Convert.ToSingle(csharpValue);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> rstPixelType.PT_DOUBLE:</span><br><span class="line">                pixelValue = (<span class="keyword">object</span>)Convert.ToDouble(csharpValue);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                pixelValue = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (Exception)</span><br><span class="line">    {</span><br><span class="line">        pixelValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> arcobject </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yet another way to edit your raster layer in ArcMap - Paint on it!</title>
      <link href="/blog/2015/03/12/Yet-another-way-to-edit-your-raster-layer-in-ArcMap-Paint-on-it/"/>
      <url>/blog/2015/03/12/Yet-another-way-to-edit-your-raster-layer-in-ArcMap-Paint-on-it/</url>
      
        <content type="html"><![CDATA[<p>I am glad to announce that the project ArcMap Raster Edit Suite (ARES) has proceed to its second major version 0.2.0! A completely new toolbar <strong>Raster Painter</strong> is added into the add-in. Many people have realized that editing pixels using tools in Raster Editor may be labor intensive, especially when editing large number of pixels. This toolbar is here to provide an ultimately flexible solution to edit pixels, by painting new values on it. The editing style is design to be similar to draw image and picture. You can find similar toolbars in ArcMap like ArcScan and Raster Painting, but they are not designed for raster data modification. Of course, a very close analogy is Paint on Window.</p><a id="more"></a><h2 id="Raster-Painter-Toolbar"><a href="#Raster-Painter-Toolbar" class="headerlink" title="Raster Painter Toolbar"></a>Raster Painter Toolbar</h2><hr><p>The ARES installation package could be downloaded at the <a href="https://github.com/haoliangyu/ares" target="_blank" rel="noopener"><strong>GitHub project page</strong></a>.</p><p>After installing the ARES Add-In, a new toolbar <strong>Raster Painter</strong> will be added into ArcMap.</p><p>In the initial release, the tool includes two basic tools:</p><ul><li>**Freehand Paint** - provide a freehand painting on the raster layer</li><li>**Erase** - Erase unsaved painted pixels from cache</li></ul><p>This toolbar aims at maximizing the flexibility, not the accuracy (e.g. editing pixels at specific rows and columns). If the accuracy is your need, please have a look at another toolbar <a href="https://github.com/haoliangyu/ares" target="_blank" rel="noopener"><strong>Raster Editor</strong></a>.</p><h2 id="Painting-on-the-layer"><a href="#Painting-on-the-layer" class="headerlink" title="Painting on the layer"></a>Painting on the layer</h2><hr><p>Painting on a raster layer in ArcMap is just like painting a picture with Paint or PhotoShop. The major difference is just you are painting values, instead of colors, on the raster layer. You can do it just with a few steps.</p><ul><li><strong>Start Painting Section</strong>. You can only paint on a raster layer for one time. If you have several layers in ArcMap, you will select one for painting in the selection window.</li></ul><ul><li><strong>Add Values for Painting</strong>. Click the <em>Add Values</em> button on the <em>Raster Paint</em> window, in order to add values that you want to paint on the layer.</li></ul><p>A random color will be assigned to each added value. You can change the color by right clicking the color column on the value list.</p><p>If you want to delete values from the list, just click the <em>Delete Values</em> button.</p><p>If you want to add new values that does not exist on the layer, click <em>Add New Values…</em> button on the <em>Options</em> Menus. However, you are not able to add any value violating the pixel type of the layer (e.g. 257 for a 8-bit unsigned integer layer).</p><ul><li><strong>Painting Values</strong>. After selecting a value on the <em>Raster Paint</em> window, you can paint the value on the layer using the <em>Freehand Paint</em> tool.</li></ul><p><strong>While painting, please keep you mouse move smoothly and steadily.</strong></p><p>Painted values are symbolized with yellow frame so that you are not going to miss them.</p><ul><li><strong>Erase Painted Values</strong>. If you want to remove values you paint, just use the <em>Erase</em> tool to remove them.</li></ul><p>Noted that the <em>Erase</em> tool can only remove painted values on the layer. If you want to erase existing values on the layer, you could simply paint the NoData value on pixels.</p><ul><li><strong>Save Painted Values</strong>. You can save painted values to the original file using the <em>Save Paints</em> button, or to a new file using the <em>Save Paints As</em> button.</li></ul><ul><li><strong>Stop Painting Section</strong></li></ul><p>Now you have your raster layer edited. Isn’t it simple and quick :)</p><h2 id="What-is-next"><a href="#What-is-next" class="headerlink" title="What is next?"></a>What is next?</h2><hr><p>The initial release only provides the most basic functionality. More advanced and handy tools are under development:</p><ul><li><p>Draw polyline/polygon/Circle/Rectangle</p></li><li><p>Draw in selection region</p></li><li><p>Fill polygon</p></li><li><p>Painting history (e.g. undo and redo)</p></li></ul><p>I hope I can finish these updates soon. If you have any idea about the new functionality, don’t hesitate to give me a comment :)</p><h2 id="Special-Thanks"><a href="#Special-Thanks" class="headerlink" title="Special Thanks"></a>Special Thanks</h2><hr><p>I would like to thank Xuan Wang, Hancheng Nie and Jiang Qing for contributing their codes to this project. And I would like to thank all people who support and encourage me to continue this project.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> arcgis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Making masks from Quality Control bits of MODIS land products in Python (Update)</title>
      <link href="/blog/2015/02/20/Making-masks-from-Quality-Control-bits-of-MODIS-land-products-in-Python-Update/"/>
      <url>/blog/2015/02/20/Making-masks-from-Quality-Control-bits-of-MODIS-land-products-in-Python-Update/</url>
      
        <content type="html"><![CDATA[<p><strong>Update</strong> Since 0.3.0, most class and function names have been updated according to pep8.</p><p>Days ago when I published the first version of *<a href="https://github.com/haoliangyu/pymasker" target="_blank" rel="noopener">pymasker</a>* for masking Landsat 8 image, Dr. Robert A. Washington-Allen suggested me whether the package would be used for MODIS products. After I read technical documents of MODIS, I realize that the Quality Control bits of MOIDS products has the same structure as the QA band of Landsat 8. Therefore, I update the package to adapt MODIS products (or other NASA products with similar QC/QA bits).</p><a id="more"></a><p>In this article, I am going to show how to extract masks from the Quality Control bits of MODIS land product in python.</p><h2 id="MODIS-QC-QA-bits"><a href="#MODIS-QC-QA-bits" class="headerlink" title="MODIS QC/QA bits"></a>MODIS QC/QA bits</h2><hr><p>The QC/QA bits of MODIS is a binary number, of which each section represents the state of certain condition. Just take the 250m resolution land surface reflectance product (MOD09GQ) as example. The QC band (maybe called QA band in other products) is the fourth band of the HDF dataset. It is a unsigned 16-bit band. Each value on the pixel indicates a combination of pixel conditions. We can interpret the value by separating its binary form.</p><p>The individual bits within a binary number are read from let to right as described in the following table.</p><p>Therefore when we put the interpretation back to the bit string, we are able to know what it indicates.</p><p>As this binary number is 4096 in integer, all pixels having value 4096 in the QC band are high quality and cloud free with atmosphere correction, but no adjacency correction.</p><p>The structure of QC/QA bits vary in different MODISO products and different data collection. For full detail for each product, please have a look at</p><ul><li><a href="https://lpdaac.usgs.gov/products/modis_products_table" target="_blank" rel="noopener">MODIS Land Products QA Tutorial</a></li></ul><p>In the next sections, I will show how to make masks based on the QC/QA bits in python.</p><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><hr><p>Before getting started, you need to do the following preparations:</p><ul><li><p>Download and install <strong><a href="https://github.com/haoliangyu/pymasker" target="_blank" rel="noopener">pymasker</a></strong>.</p></li><li><p>Know the band number of QC/QA band in your HDF dataset.</p></li><li><p>Know the QC/QA bit structure of your dataset. If you only want the mask of quality level, you don’t have to know the bit structure. Please go bottom and read the new update.</p></li></ul><h2 id="Maksing-for-MODIS-product"><a href="#Maksing-for-MODIS-product" class="headerlink" title="Maksing for MODIS product"></a>Maksing for MODIS product</h2><hr><p>I will continue to use MOD09GQ in the sample. First you need to load the QC Band</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymasker <span class="keyword">import</span> Masker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directly load from file, require GDAL (3 is the QA band number)</span></span><br><span class="line">masker = Masker(<span class="string">'MOD09GQ.A2015025.h12v04.005.2015027064556.hdf'</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Or you just load the dataset somewhere and get the band data as numpy array</span></span><br><span class="line"><span class="keyword">import</span> gdal</span><br><span class="line"></span><br><span class="line">hdfdataset = gdal.Open(<span class="string">'MOD09GQ.A2015025.h12v04.005.2015027064556.hdf'</span>)</span><br><span class="line">subdataset = hdfdataset.GetSubDatasets()[<span class="number">3</span>][<span class="number">0</span>]</span><br><span class="line">bandarray = gdal.Open(subdataset).ReadAsArray()</span><br><span class="line"></span><br><span class="line">masker = Masker(bandarray)</span><br></pre></td></tr></tbody></table></figure><p>You need to know the bit information to generate certain masks. For example, we want a mask only wit high quality pixels. In the previous section we have known that the quality bits start at the beginning (position 0) and the length is 2. We also know that <em>‘00’</em> indicate corrected product produced at ideal quality in all bands. Therefore, the high quality mask could be made with</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get high quality mask</span></span><br><span class="line">mask = modismasker.ge_tmask(bitpos = <span class="number">0</span>, bitlen = <span class="number">2</span>, value = <span class="string">'00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save the mask as a TIF file</span></span><br><span class="line">masker.save_tif(hqmask, <span class="string">'result.tif'</span>)</span><br></pre></td></tr></tbody></table></figure><p>Then you can get a binary mask where 1 represents the high quality pixel.</p><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p><em>Pyamsker</em> has provided a new class for producing QA mask since version 0.2.2. So you don’t have to look for and remember those binary bits (Well I don’t like them, too).</p><p>I have wrapped quality levels for MODIS land products.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymasker <span class="keyword">import</span> ModisQuality</span><br><span class="line"></span><br><span class="line"><span class="comment"># Corrected product produced at ideal quality for all bands.</span></span><br><span class="line">quality = ModisQuality.high</span><br><span class="line"></span><br><span class="line"><span class="comment"># Corrected product produced at less than ideal quality for some or all bands.</span></span><br><span class="line">quality = ModisQuality.medium</span><br><span class="line"></span><br><span class="line"><span class="comment"># Corrected product not produced due to some reasons for some or all bands.</span></span><br><span class="line">quality = ModisQuality.low</span><br><span class="line"></span><br><span class="line"><span class="comment"># Corrected product not produced due to cloud effects for all bands.</span></span><br><span class="line">quality = ModisQuality.low_cloud</span><br></pre></td></tr></tbody></table></figure><p>Therefore, the masking code would be very intuitive and readable.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a MODIS QA masker, similar to creating a masker above</span></span><br><span class="line"><span class="keyword">from</span> pymasker <span class="keyword">import</span> ModisMasker</span><br><span class="line"></span><br><span class="line">masker = ModisMasker(<span class="string">'MOD09GQ.A2015025.h12v04.005.2015027064556.hdf'</span>)</span><br><span class="line">mask = masker.get_qa_mask(ModisQuality.high)</span><br></pre></td></tr></tbody></table></figure><p>I am going to gradually support all MODIS products in the future release. Please look forward to my new update :)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> remote sensing </tag>
            
            <tag> modis </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Editing single pixels of raster layer in ArcMap with just a few clicks</title>
      <link href="/blog/2015/02/18/Editing-single-pixels-of-raster-layer-in-ArcMap-with-just-a-few-clicks/"/>
      <url>/blog/2015/02/18/Editing-single-pixels-of-raster-layer-in-ArcMap-with-just-a-few-clicks/</url>
      
        <content type="html"><![CDATA[<p>Editing single pixels of a raster layer is a common task in daily GIS and RS practice. For example</p><ul><li><p>Removing misclassified pixels from a land cover classification result</p></li><li><p>Creating a set of multiple raster layers with minor difference for model simulation</p></li><li><p>etc.</p></li></ul><p>In ArcMap we use Raster Calculator and Reclassification tool as many instructions suggest. However, these tools are designed to edit the layer as a whole and they are not flexible enough for minor modification. If ArcMap allows us to edit single features of a vector layer, why we cannot edit single pixels of a raster layer in ArcMap? That is the reason why the project ArcMap Raster Edit Suite (ARES) starts. It aims at providing an ArcMAp Add-In with tools to allows single raster pixels editing, just like what we can do with the vector layer. Flexible, quick and neat!</p><a id="more"></a><h2 id="Download-and-Install"><a href="#Download-and-Install" class="headerlink" title="Download and Install"></a>Download and Install</h2><hr><p>This project is hosted and published at <a href="https://github.com/haoliangyu/ares" target="_blank" rel="noopener">GitHub</a>. You can download the installation file at <a href="https://github.com/haoliangyu/ares/releases/download/0.1.3/AREA.0.1.3.zip" target="_blank" rel="noopener">Here</a></p><p>After the download finishes, you need to choose the installation file that matches the ArcMap on your computer because this Add-In support ArcMap 10.0/10.1/10.2. There are two files in the folder and <strong>ARES.esriAddin</strong> is what you need:</p><p>Double click and you could see the installation wizard.</p><p>Just click <strong>Install Add-In</strong> and then you get it.</p><h2 id="Raster-Editor-Toolbar"><a href="#Raster-Editor-Toolbar" class="headerlink" title="Raster Editor Toolbar"></a>Raster Editor Toolbar</h2><hr><p>Now you have a new toolbar <strong>Raster Editor</strong> installed in your ArcMap.</p><p>This toolbar includes following tools:</p><ul><li>: **Select & Edit**, which is used to select pixels for editing.</li><li>: **Identify**, which is used to select pixels in order to get their values, row/column indexes and zonal statistics.</li><li>: **Go To Pixel**, which is used to locate pixel with given row and column index.</li></ul><p>The purpose of this toolbar is to provide tools for precise modification with known row and column index.</p><h2 id="Step-by-Step-Editing-Raster-Layer"><a href="#Step-by-Step-Editing-Raster-Layer" class="headerlink" title="Step by Step: Editing Raster Layer"></a>Step by Step: Editing Raster Layer</h2><hr><p>In this section, I am going to show a brief guide on how to edit single pixels of raster layer in ArcMap.</p><ul><li><p>First of all, we have the layer imported in ArcMap.</p></li><li><p>Then start the editing section at the <strong><em>Start Editor</em></strong> menu by clicking <strong><em>Start Editing</em></strong> button. You can only edit one raster layer at one time. If there are more than one raster layers in ArcMap, there will be a prompt-up window to let you choose one.</p></li><li><p>Click the <strong><em>Select & Edit</em></strong> button to activate the tool.</p></li><li><p>Click or drag a region of interest on the layer to selected pixels. All selected pixels will be highlighted on the map with a blue frame. <strong>Noted that selecting too much pixels may lead to crash of ArcMap</strong>.</p></li></ul><ul><li>Edit values of selected pixel at the <strong>Raster Edit</strong> Window. All edits will be highlighted on the map with a yellow symbol.</li></ul><p>Make sure your input value is compatible with the pixel type of the raster layer. Any pixel left blank will be considered as NoData Pixel.</p><ul><li>Save edits to the raster file using <strong><em>Save Edits</em></strong> button on the <strong><em>Raster Editor</em></strong> menu. If you want to save edits to a new file, click the <strong><em>Save Edits As</em></strong> button. You will see the change of layer right after refreshing the ArcMap.</li></ul><ul><li>Stop the editing section by clicking <strong><em>Stop Editing</em></strong> button.</li></ul><p>Now you finish the editing section and get the desired result.</p><h2 id="Why-there-is-only-one-toolbar-in-the-suite"><a href="#Why-there-is-only-one-toolbar-in-the-suite" class="headerlink" title="Why there is only one toolbar in the suite?"></a>Why there is only one toolbar in the suite?</h2><hr><p>Well, we are working on anther toolbar so that we can make it a real tool suite. Please have a visit on our <a href="https://github.com/haoliangyu/ares" target="_blank" rel="noopener">project page</a> later.</p><p>If you like this project, give it a star :)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> arcgis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Comparison of different sampling rules in SVM classification</title>
      <link href="/blog/2015/01/26/Comparison-of-different-sampling-rules-in-SVM-classification/"/>
      <url>/blog/2015/01/26/Comparison-of-different-sampling-rules-in-SVM-classification/</url>
      
        <content type="html"><![CDATA[<p>The problem of sampling rule in Support Vector Machine raised in the discussion when I was in the course <em>Advanced Remote Sensing</em>.</p><p>The quality of training sample has deterministic influence to the accuracy of supervised classification methods. A properly designed sampling rule plays a substantial role in yielding an informative training sample set. The design of sampling strategy depends on both the characteristics of objects of interest and the applied classification methods.</p><a id="more"></a><p>Support Vector Machine (SVM) is an increasingly popular classification method for remote sensing image both in industry and research. As for the theory and concept of SVM, there have been many introductory articles such as <a href="http://rvlasveld.github.io/blog/2013/07/12/introduction-to-one-class-support-vector-machines/" target="_blank" rel="noopener">Roemer`s blog</a>. Because support vectors are selected from training samples for maximizing the margin between classes, quality of sample set will decide the effectiveness of the hyperplane and affect the performance of the classifier.</p><p>In brief the mechanism of SVM is very different from traditional methods like Maximum Likelihood Classification. Here comes the question: <strong>Does the sampling rule used in traditional methods also work for SVM? How does the sampling rule affect the SVM classification result?</strong></p><h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h2><hr><p>To answer this question, I would like to set up a scenario for the classification experiment. In this case, I choose to perform a cloud detection based on Landsat 8 OLI image for two reasons:</p><ul><li><p>It is a most basic binary classification.</p></li><li><p>Cloud detection could be very challenging because thin cloud is very difficult to detect in many situations.</p></li></ul><p>I use an image with both thick cloud and thin cloud in order to increase the difficulty of classification (See Figure 1). <a href="http://landsat.usgs.gov/band_designations_landsat_satellites.php" target="_blank" rel="noopener">Band 2 to 7</a> are used and the SVM classifier in ENVI is utilized with default configuration. Four hundred pixels are randomly picked up as test sample: half of them are cloud (blue points) and the others are ground objects (yellow points).</p><h2 id="Sampling-Rules"><a href="#Sampling-Rules" class="headerlink" title="Sampling Rules"></a>Sampling Rules</h2><hr><p>I am particularly interested in three sample rules.</p><ul><li>Stratified random sampling</li></ul><p>This is a classic sample rule. Its idea is to randomly select training samples of one class from the sample pool of that class. The sample size of each class could be a fixed number or proportional to the size of sample pool of that class.</p><ul><li>Cluster sampling</li></ul><p>However, in practice random sampling is sometimes difficult to achieve, especially when the sample is selected by hand or a semi-automatic method. The sample pixels generally tend to be more clustering than random. (it is actually what we do in the ENVI class: drag a region of interest and treat it as sample set)</p><ul><li>Boundary sampling</li></ul><p>Its basic idea is that support vectors are likely also located near the geographical boundary of two classes. Although pixels located around geographic boundaries might contain spectral information of both classes to some extent, Foody and Mathur (2006) suggested that mixing pixels at two sides of ground object boundary could be highly effective in SVM even the sample size was very smaller. They considered this approach as a competitive alternative of conventional sampling strategy.</p><p>So I select three training sets based on above sampling rules (See Figure 2).</p><h2 id="Training-set-in-feature-space"><a href="#Training-set-in-feature-space" class="headerlink" title="Training set in feature space"></a>Training set in feature space</h2><hr><p>While using the SVM, we hope that our training samples are located near the boundary of classes in the feature space. Figure 3 shows how samples in three training sets, as well as the test set, scatter at a feature space (red band vs. NIR band).</p><p>Cloud has high reflectance in both red band and near infrared band, however, the reflectance of ground objects (most are vegetation) is low in red band and high in near infrared band. Due to the reflectance difference, samples in the feature space apparently belong to two distinct groups: cloud and ground objects. As shown in Figure 3, the distribution of samples in different training sets are totally different. Boundary sampling produced samples located near the boundary of two classes. Samples generated with stratified random sampling could better represent the overall characteristics of two classes. Clustering sampling within high confidence area would generate samples also clustering in the feature space.</p><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><hr><p>The classification results are shown in Table 1 and Figure 4.</p><p>The results, as expected, indicate that boundary sampling is able to generate better training sample and contribute to higher classification accuracy, compared to the other two sampling strategies.</p><p>ALl trained classifiers are also applied to the whole study image. Classifier trained with boundary samples is very sensitive to the difference between cloud and non-cloud pixels. It will try to differentiate all mixing pixels and this could be too sensitive. Classifier trained by cluster samples only recognizes thick cloud on the image and ignores pixels with mixing spectral information. Classifier trained by stratified random samples takes a balance between them: neither too aggressive nor too conventional. For detailed discussion, please read my report (see link below).</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><hr><p>Let’s get back to our initial questions and their answers.</p><ul><li>Does the sampling rule used in traditional methods also work for SVM?</li></ul><p>Apparently the traditional stratified random sampling still works pretty well for the SVM classification. The classification accuracy in the experiment is about 90%, which is high enough for most situations.</p><ul><li>How does the sampling rule affect the SVM classification result?</li></ul><p>If we can use the portion of boundary (mixing) pixels in the training set to define sampling rule, we are able to build a link among three sampling rules used above. As we include more boundary pixels into the training set, the classifier would become more sensitive and have a better performance in identifying mixing objects. However, high sensitivity could also increase the error rate while identifying mixing objects. There is a trade-off between high sensitivity and low error rate within the selection of sampling strategies.</p><p>There is no generally appropriate sampling rule for all situations. However, depending on the need of classification, there exits an appropriate sampling rule for specific situation. Therefore, it is not difficult to understand why the stratified random sampling is still the first choice in practical use. Though classifier trained stratified random sampling is expected to have fair performance, it is less likely to be trapped into the problem of overestimation and underestimation.</p><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><hr><p>This article is a simplified version of my project report. For more detail, please read my full report <a href="https://www.dropbox.com/s/yadta4jnuqgml9s/svm_sampling_report.pdf?dl=0" target="_blank" rel="noopener">A Comparison of Sampling Strategies in SVM Classification</a>.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><hr><p>[1] Foody, G. M. and A. Mathur (2006). “The use of small training sets containing mixed pixels for accurate hard image classification: Training on mixed spectral responses for classification by a SVM.” Remote Sensing of Environment 103(2): 179-189.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> remote sensing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pymasker</title>
      <link href="/blog/2015/01/22/Pymasker/"/>
      <url>/blog/2015/01/22/Pymasker/</url>
      
        <content type="html"><![CDATA[<p>Pymasker is a python package to generate various masks from the landsat 8 Quality Assessment band and MODIS products.</p><a id="more"></a><p>This project is hosted at <a href="https://github.com/haoliangyu/pymasker" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>The package can be shipped to your computer using pip.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymasker</span><br></pre></td></tr></tbody></table></figure><p>Or just install it with the source code.</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></tbody></table></figure><p>This package depends on <a href="http://www.numpy.org/" target="_blank" rel="noopener"><strong>numpy</strong></a>. If you want to directly load the QA band file, <a href="https://pypi.python.org/pypi/GDAL/" target="_blank" rel="noopener"><strong>GDAL</strong></a> is also in need if you want to .</p><h2 id="Releasse"><a href="#Releasse" class="headerlink" title="Releasse"></a>Releasse</h2><ul><li><p>0.1.0</p><ul><li>First release of this package</li></ul></li><li><p>0.1.2</p><ul><li>Added multi-criteria masking</li><li>Added new confidence leve: none</li></ul></li><li><p>0.1.3</p><ul><li>Added <em>cumulative</em> options for multi-criteria masking</li><li>Fixed a default value problem in multi-criteria masking</li></ul></li><li><p>0.1.4</p><ul><li>Removed the dependence of GDAL</li></ul></li><li><p>0.2.0</p><ul><li>Added support for MODIS land products</li></ul></li><li><p>0.2.3</p><ul><li>Restructure package</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> project </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Making masks with Landsat 8 Quality Assessment band using Python</title>
      <link href="/blog/2015/01/19/Making-masks-with-Landsat-8-Quality-Assessment-band-using-Python/"/>
      <url>/blog/2015/01/19/Making-masks-with-Landsat-8-Quality-Assessment-band-using-Python/</url>
      
        <content type="html"><![CDATA[<p><strong>Update</strong> Since 0.2.0, the <em>qabmasker</em> has been renamed as <em>landsatmasker</em> and the function <em>getmask</em> has been renamed as <em>getmultimask</em> for better identification. Please update your script accordingly.</p><p><strong>Update</strong> Since 0.3.0, most class and function names have been updated according to the pep8.</p><p>The Quality Assessment (QA) band is a standard product included in each Landsat 8 image downloaded from USGS, which contains the quality information of each pixel such as cloud, snow/ice, water body etc. The detailed information of this band can be found at <a href="http://landsat.usgs.gov/L8QualityAssessmentBand.php" target="_blank" rel="noopener">Landsat 8 Quality Assessment Band</a>.</p><a id="more"></a><p>Although the bits structure of the QA band is easy-to-understand, it would several steps to extract the desired mask in <a href="http://courses.neteler.org/processing-landsat8-data-in-grass-gis-7/" target="_blank" rel="noopener">QGIS</a> or <a href="https://hyspeedblog.wordpress.com/2014/08/27/working-with-landsat-8-using-and-interpreting-the-quality-assessment-qa-band/" target="_blank" rel="noopener">L-LDOPE Toolbelt</a>. In this article, I am going to introduce how to use <em>pymasker</em> to generate masks from Landsat 8 QA band in Python. This package is designed to provide a straightforward and intuitive way to generate masks from the QA band. It is an open-source package and the project is hosted at <a href="https://github.com/dz316424/pymasker" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>The package can be shipped to your computer using pip.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymasker</span><br></pre></td></tr></tbody></table></figure><p>Or just install it with the source code.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></tbody></table></figure><p>This package depends on <a href="http://www.numpy.org/" target="_blank" rel="noopener"><strong>numpy</strong></a>. If you want to directly load the QA band file, <a href="https://pypi.python.org/pypi/GDAL/" target="_blank" rel="noopener"><strong>GDAL</strong></a> is also in need.</p><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><p>First of all, you need to load the QA band into the <em>qabmaser</em> class.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymasker <span class="keyword">import</span> LandsatMasker</span><br><span class="line"></span><br><span class="line"><span class="comment"># load the QA band directly</span></span><br><span class="line">masker = LandsatMasker(<span class="string">'LC80170302014272LGN00_BQA.TIF'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load a numpy array that contains band data</span></span><br><span class="line">masker = LandsatMasker(bandarray)</span><br></pre></td></tr></tbody></table></figure><p>The QA band contains the detection result of the following four specific conditions for each pixel:</p><ul><li><p>Cloud</p></li><li><p>Cirrus</p></li><li><p>Snow/Ice</p></li><li><p>Vegetation</p></li><li><p>Water body</p></li></ul><p>For each condition, the algorithm gives a confidence to indicate its existence on the pixel.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymasker <span class="keyword">import</span> LandsatConfidence</span><br><span class="line"></span><br><span class="line"><span class="comment"># Algorithm has high confidence that this condition exists (67-100 percent confidence).</span></span><br><span class="line">conf = LandsatConfidence.high</span><br><span class="line"></span><br><span class="line"><span class="comment"># Algorithm has medium confidence that this condition exists (34-66 percent confidence).</span></span><br><span class="line">conf = LandsatConfidence.medium</span><br><span class="line"></span><br><span class="line"><span class="comment"># Algorithm has low to no confidence that this condition exists (0-33 percent confidence)</span></span><br><span class="line">conf = LandsatConfidence.low</span><br><span class="line"></span><br><span class="line"><span class="comment"># Algorithm did not determine the status of this condition.</span></span><br><span class="line">conf = LandsatConfidence.undefined</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nothing, unspecified confidence</span></span><br><span class="line">conf = LandsatConfidence.none</span><br></pre></td></tr></tbody></table></figure><p>To generate a mask, you need to define a desired confidence for the target condition.</p><p><em>Pymasker</em> provides several functions to get the most commonly used mask. The resulting mask is a binary numpy array with 1 representing existence of specific condition and 0 representing nonexistence.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get mask indicating cloud pixels with high confidence</span></span><br><span class="line">mask = masker.get_cloud_mask(LandsatConfidence.high)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get mask indicating cloud pixels with at least medium confidence</span></span><br><span class="line">mask = masker.get_cloud_mask(LandsatConfidence.medium, cumulative = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get mask indicating snow/ice pixels with at least medium confidence</span></span><br><span class="line">mask = masker.get_snow_mask(LandsatConfidence.medium, cumulative = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get mask indicating water body pixels with high confidence</span></span><br><span class="line">mask = masker.get_water_mask(LandsatConfidence.high)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get mask indicating vegetation pixels with high confidence</span></span><br><span class="line">mask = masker.get_veg_mask(LandsatConfidence.high)</span><br></pre></td></tr></tbody></table></figure><p><em>Pymasker</em> also provides a function for multi-criteria masking. In this function, you need to specify the confidence level of each condition. If you don’t want the function consider one of conditions, you need to set it as confidence.none. Two different masking methods are provided:</p><ul><li><p>Inclusive - Mask pixels that meet at least one of all criteria.</p></li><li><p>Exclusive - Only Mask pixels that meet all criteria. (default)</p></li></ul><p>Sample code for multi-criteria masking</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get mask indicating cloud pixels (high confidence) and cirrus pixels (high confidence).</span></span><br><span class="line"><span class="comment"># Exclusive and noncumulative</span></span><br><span class="line">mask = masker.get_multi_mask(cloud = LandsatConfidence.high, water = LandsatConfidence.high)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save the result if you want.</span></span><br><span class="line">masker.save_tif(mask, <span class="string">'result.tif'</span>)</span><br></pre></td></tr></tbody></table></figure><p>Now you have your mask! Nice and quick!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GIS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> remote sensing </tag>
            
            <tag> landsat </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcMap Raster Edit Suite</title>
      <link href="/blog/2014/09/17/ArcMap-Raster-Edit-Suite/"/>
      <url>/blog/2014/09/17/ArcMap-Raster-Edit-Suite/</url>
      
        <content type="html"><![CDATA[<p>ArcMap Raster Edit Suite (ARES) is an addin for ArcMap 10.x that enables value editing of single pixels on raster layer. This is an open-source software and the project is hosted at <a href="https://github.com/haoliangyu/ares" target="_blank" rel="noopener">GitHub</a> and published at <a href="http://sourceforge.net/projects/arcmaprastereditor/?source=navbar" target="_blank" rel="noopener">SourceForge</a> as well.</p><a id="more"></a><p>This addin only works on ArcMap 10.0/10.1/10.2/10.3.</p><p>A detail user guide could be found at: <strong><a href="https://github.com/haoliangyu/ares/wiki" target="_blank" rel="noopener">ArcMap Raster Edit Suite</a></strong></p><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><a href="https://github.com/dz316424/ares/releases/download/v0.2.1/ARES.0.2.1.zip" target="_blank" rel="noopener">ARES 0.2.1</a></p><p>The listed packages are stable releases and may not include up-to-date features. To download latest version, please visit the <a href="https://github.com/haoliangyu/ares/" target="_blank" rel="noopener">project page</a>.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Simply double-click the RasterEditor.esriAddIn in the package and ArcGIS AddIn installation wizzard will guide you. for more detail, check the wiki page <a href="https://github.com/haoliangyu/ares/wiki/Install-and-Uninstall" target="_blank" rel="noopener">Install and Uninstall</a>.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gis </tag>
            
            <tag> project </tag>
            
            <tag> arcgis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
